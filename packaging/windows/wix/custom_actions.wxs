<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <!--
    Custom actions to mimic the NSIS behavior defined in cmake/packaging/windows_nsis.cmake:
    - Reset ACLs on install dir
    - Update PATH (add/remove)
    - Migrate config files
    - Add/remove firewall rules
    - Install/uninstall Virtual Gamepad (ViGEm) via PowerShell helper
    - Install/uninstall Sunshine service and autostart configuration
    - Optional prompts on uninstall for gamepad removal and deleting install dir

    Notes:
    - Relies on WixUtilExtension (WixQuietExec) to run commands quietly with logging.
    - Uses [INSTALL_ROOT] as the install directory property used by CPack WiX.
  -->

  <Fragment>
    <!-- Pull this fragment into the CPack-generated MSI -->
    <FeatureRef Id="ProductFeature"/>
    
    <!-- Keep Restart Manager enabled (default) to stop services in basic/silent UI -->
    
    <!-- Embedded VBScript to prompt the user on uninstall -->
    <Binary Id="AskRmSudovdaVbs" SourceFile="$(sys.SOURCEFILEDIR)ask_remove_sudovda.vbs"/>
    <Binary Id="AskRmGamepadVbs" SourceFile="$(sys.SOURCEFILEDIR)ask_remove_gamepad.vbs"/>
    <Binary Id="AskDelInstDirVbs" SourceFile="$(sys.SOURCEFILEDIR)ask_delete_install_dir.vbs"/>
    <!-- VBScript to show a final repair-complete notification (full UI only) -->
    <Binary Id="RepairCompleteVbs" SourceFile="$(sys.SOURCEFILEDIR)repair_complete.vbs"/>
    <!-- VBScripts for legacy Sunshine handling -->
    <Binary Id="AskUninstallLegacySunshineVbs" SourceFile="$(sys.SOURCEFILEDIR)ask_uninstall_legacy_sunshine.vbs"/>
    <Binary Id="WaitForLegacyUninstallVbs" SourceFile="$(sys.SOURCEFILEDIR)wait_for_legacy_uninstall.vbs"/>

  </Fragment>

  <!-- Define a stable tools directory under INSTALL_ROOT for WiX-authored payloads -->
  <Fragment>
    <DirectoryRef Id="INSTALL_ROOT">
      <Directory Id="DIR_Tools" Name="tools"/>
    </DirectoryRef>
  </Fragment>

  <!-- Place the component under INSTALL_ROOT directory -->
  <Fragment>
    <DirectoryRef Id="INSTALL_ROOT">
      <!-- Control legacy service names; keep separate from primary install component -->
      <Component Id="CtlStopSunshine" Guid="{B6D8A6A3-63B7-4C3F-8A2C-2C8F2B2F3B61}" KeyPath="yes">
        <CreateFolder/>
        <!-- Legacy service name cleanup (best-effort) -->
        <ServiceControl Id="SC_StopLegacy" Name="sunshinesvc" Stop="both" Remove="uninstall" Wait="yes" />
      </Component>
    </DirectoryRef>
  </Fragment>

  <!-- Official service installation component (installed under INSTALL_ROOT\tools) -->
  <Fragment>
    <DirectoryRef Id="DIR_Tools">
      <Component Id="SunshineSvc" Guid="*">
        <!-- The service executable bound in at link-time via PayloadRoot binder path -->
        <File Id="SunshineSvcExe" Source="!(bindpath.PayloadRoot)tools\sunshinesvc.exe" KeyPath="yes" />
        <ServiceInstall
            Id="SunshineServiceInstall"
            Name="SunshineService"
            DisplayName="Vibeshine Service"
            Type="ownProcess"
            Start="auto"
            ErrorControl="normal"
            Arguments="--service" />
        <ServiceControl Id="StartSunshineService"
            Name="SunshineService"
            Start="install"
            Stop="both"
            Remove="uninstall"
            Wait="yes" />
      </Component>
    </DirectoryRef>
  </Fragment>

  <Fragment>
    <CustomAction Id="ResetAcls" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="check" Impersonate="no" />
    <CustomAction Id="MigrateConfig" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="check" Impersonate="no" />
    <CustomAction Id="InstallSudovda" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <CustomAction Id="InstallGamepad" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />

    <!-- Prune stale web assets directory prior to installing new files (avoids stale hashed JS/CSS) -->
    <CustomAction Id="PruneWebDir" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />

    <!-- Uninstall-time actions (deferred, elevated) -->
    <CustomAction Id="RestoreNvPrefsUndo" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="check" Impersonate="no" />
    <!-- Quiet stop for repair/basic UI: proactively stop service when UI is too low for prompts -->
    <CustomAction Id="StopSvcQuietImmediate" BinaryKey="WixCA" DllEntry="WixQuietExec" Return="ignore" />
    <CustomAction Id="StopSvcQuiet" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <!-- Quiet start after repair for non-full UI; run at commit to avoid FilesInUse/reboot prompts -->
    <CustomAction Id="StartSvcQuiet" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="commit" Return="ignore" Impersonate="no" />
    <!-- Quiet process kill and service removal for manual uninstalls -->
    <CustomAction Id="KillProcsQuietImmediate" BinaryKey="WixCA" DllEntry="WixQuietExec" Return="ignore" />
    <CustomAction Id="KillProcsQuiet" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <CustomAction Id="RemoveServiceQuiet" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <CustomAction Id="UninstallSudovda" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <CustomAction Id="UninstallGamepad" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <CustomAction Id="DeleteInstallDir" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <!-- Remove everything but config on manual uninstalls when user chooses to keep data -->
    <CustomAction Id="PruneButConfig" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />

    <!-- Immediate property setters to pass commands to deferred QuietExec actions -->
    <CustomAction Id="SetResetAcls"
                 Property="ResetAcls"
                 Value="&quot;[SystemFolder]icacls.exe&quot; &quot;[INSTALL_ROOT].&quot; /reset"/>

    <CustomAction Id="SetMigrateConfig"
                 Property="MigrateConfig"
                 Value="&quot;[SystemFolder]cmd.exe&quot; /C &quot;&quot;[INSTALL_ROOT]scripts\migrate-config.bat&quot;&quot;"/>

    <CustomAction Id="SetInstallSudovda"
                 Property="InstallSudovda"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -NoLogo -NonInteractive -NoProfile -ExecutionPolicy Bypass -WindowStyle Hidden -File &quot;[INSTALL_ROOT]drivers\sudovda\install.ps1&quot;"/>

    <CustomAction Id="SetInstallGamepad"
                 Property="InstallGamepad"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -ExecutionPolicy Bypass -File &quot;[INSTALL_ROOT]scripts\install-gamepad.ps1&quot;"/>

    <!-- Immediate setter for pruning installed web assets directory before file copy -->
    <CustomAction Id="SetPruneWebDir"
                 Property="PruneWebDir"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -ExecutionPolicy Bypass -Command &quot;$p='[INSTALL_ROOT]assets\web'; if (Test-Path -LiteralPath $p) { Remove-Item -LiteralPath $p -Recurse -Force -ErrorAction SilentlyContinue }&quot;"/>


    <!-- Guard NV prefs restore on uninstall: only run if sunshine.exe still exists -->
    <CustomAction Id="SetRestoreNvPrefsUndo"
                 Property="RestoreNvPrefsUndo"
                 Value="&quot;[SystemFolder]cmd.exe&quot; /C if exist &quot;[INSTALL_ROOT]sunshine.exe&quot; ( &quot;[INSTALL_ROOT]sunshine.exe&quot; --restore-nvprefs-undo ) else ( exit /b 0 )"/>


    <CustomAction Id="AskRemoveSudovda" BinaryKey="AskRmSudovdaVbs" VBScriptCall="AskRemoveSudovda" Execute="immediate" Return="check" />
    <CustomAction Id="AskRemoveGamepad" BinaryKey="AskRmGamepadVbs" VBScriptCall="AskRemoveGamepad" Execute="immediate" Return="check" />
    <CustomAction Id="SetUninstallSudovda"
                 Property="UninstallSudovda"
                 Value="&quot;[SystemFolder]cmd.exe&quot; /C &quot;&quot;[INSTALL_ROOT]drivers\sudovda\uninstall.bat&quot;&quot;"/>
    <CustomAction Id="SetUninstallGamepad"
                 Property="UninstallGamepad"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -ExecutionPolicy Bypass -File &quot;[INSTALL_ROOT]scripts\uninstall-gamepad.ps1&quot;"/>

    <CustomAction Id="AskDeleteInstallDir" BinaryKey="AskDelInstDirVbs" VBScriptCall="AskDeleteInstallDir" Execute="immediate" Return="check" />
    <CustomAction Id="SetDeleteInstallDir"
                 Property="DeleteInstallDir"
                 Value="&quot;[SystemFolder]cmd.exe&quot; /C rmdir /S /Q &quot;[INSTALL_ROOT].&quot;"/>
    <!-- Immediate setter for quiet stop service -->
    <CustomAction Id="SetStopSvcQuietImmediate"
                 Property="StopSvcQuietImmediate"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -ExecutionPolicy Bypass -NoProfile -Command &quot;&amp; { $svc = Get-Service -Name 'SunshineService' -ErrorAction SilentlyContinue; if ($svc) { if ($svc.Status -ne 'Stopped') { Stop-Service -Name 'SunshineService' -Force -ErrorAction SilentlyContinue; $svc.WaitForStatus('Stopped','00:00:30') } } }&quot;"/>
    <CustomAction Id="SetStopSvcQuiet"
                 Property="StopSvcQuiet"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -ExecutionPolicy Bypass -NoProfile -Command &quot;&amp; { $svc = Get-Service -Name 'SunshineService' -ErrorAction SilentlyContinue; if ($svc) { if ($svc.Status -ne 'Stopped') { Stop-Service -Name 'SunshineService' -Force -ErrorAction SilentlyContinue; $svc.WaitForStatus('Stopped','00:00:30') } } }&quot;"/>
    <!-- Immediate setter to prune everything except the config directory -->
    <CustomAction Id="SetPruneButConfig"
                 Property="PruneButConfig"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -ExecutionPolicy Bypass -Command &quot;$r='[INSTALL_ROOT]'; Get-ChildItem -LiteralPath $r -Force | Where-Object Name -ne 'config' | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue&quot;"/>

    <!-- Immediate setter for quiet start service -->
    <CustomAction Id="SetStartSvcQuiet"
                 Property="StartSvcQuiet"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -ExecutionPolicy Bypass -NoProfile -Command &quot;&amp; { $svc = Get-Service -Name 'SunshineService' -ErrorAction SilentlyContinue; if ($svc) { if ($svc.Status -ne 'Running') { Start-Service -Name 'SunshineService' -ErrorAction SilentlyContinue; $svc.WaitForStatus('Running','00:00:20') } } }&quot;"/>
    <!-- Immediate setters for quiet process kill and service removal on manual uninstall -->
    <CustomAction Id="SetKillProcsQuietImmediate"
                 Property="KillProcsQuietImmediate"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -ExecutionPolicy Bypass -Command &quot;$n='sunshine','sunshinesvc','sunshine_wgc_capture','playnite_launcher'; foreach($p in $n){ Get-Process -Name $p -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue }&quot;"/>
    <CustomAction Id="SetKillProcsQuiet"
                 Property="KillProcsQuiet"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -ExecutionPolicy Bypass -Command &quot;$n='sunshine','sunshinesvc','sunshine_wgc_capture','playnite_launcher'; foreach($p in $n){ Get-Process -Name $p -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue }&quot;"/>
    <CustomAction Id="SetRemoveServiceQuiet"
                 Property="RemoveServiceQuiet"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -NoP -EP Bypass -C &quot;sc.exe delete SunshineService | Out-Null; sc.exe delete sunshinesvc | Out-Null&quot;"/>

    <!-- Legacy Sunshine handling actions -->
    <CustomAction Id="AskUninstallLegacySunshine" BinaryKey="AskUninstallLegacySunshineVbs" VBScriptCall="AskUninstallLegacySunshine" Execute="immediate" Return="check" />
    <CustomAction Id="WaitForLegacyUninstall" BinaryKey="WaitForLegacyUninstallVbs" VBScriptCall="WaitForLegacyUninstall" Execute="immediate" Return="check" />
    
    <CustomAction Id="BlockLegacySunshineStillPresent" Error="Legacy Sunshine is still installed. In order to install Vibeshine it must be uninstalled first, click OK to start the uninstallation." />
    <CustomAction Id="BlockUserCancelledLegacy" Error="Installation cancelled. Legacy Sunshine must be removed before installing VibeSunshine." />

    <!-- UI-only prompt at end of a successful Repair to inform no reboot is required -->
    <CustomAction Id="RepairCompletePrompt" BinaryKey="RepairCompleteVbs" VBScriptCall="ShowRepairComplete" Execute="immediate" Return="ignore" />

  </Fragment>

  <Fragment>
    <DirectoryRef Id="INSTALL_ROOT">
      <Component Id="Env_Path" Guid="{0D8C0E3E-6A7D-48E2-9A1C-0B1A6B7D8C90}">
        <CreateFolder />
        <Environment Id="EnvPathSunshine"
                     Name="PATH"
                     Action="set"
                     System="yes"
                     Part="last"
                     Permanent="no"
                     Value="[INSTALL_ROOT]" />
      </Component>
      <Component Id="Fw_Exceptions" Guid="{2A7E0C83-2F3D-4C0C-9D5D-7C0B1A2E3F45}">
        <CreateFolder />
        <Firewall:FirewallException xmlns:Firewall="http://schemas.microsoft.com/wix/FirewallExtension"
                                    Id="FE_SunshineExe"
                                    Name="Vibeshine Sunshine"
                                    Program="[INSTALL_ROOT]sunshine.exe"
                                    Profile="all"
                                    Scope="any" />
        <Firewall:FirewallException xmlns:Firewall="http://schemas.microsoft.com/wix/FirewallExtension"
                                    Id="FE_SunshineSvcExe"
                                    Name="Vibeshine Sunshine Service"
                                    Program="[INSTALL_ROOT]tools\sunshinesvc.exe"
                                    Profile="all"
                                    Scope="any" />
      </Component>
    </DirectoryRef>
  </Fragment>
</Wix>
