<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <!--
    Custom actions to mimic the NSIS behavior defined in cmake/packaging/windows_nsis.cmake:
    - Reset ACLs on install dir
    - Update PATH (add/remove)
    - Migrate config files
    - Add/remove firewall rules
    - Install/uninstall Virtual Gamepad (ViGEm) via PowerShell helper
    - Install/uninstall Apollo service and autostart configuration
    - Optional prompts on uninstall for gamepad removal and deleting install dir

    Notes:
    - Relies on WixUtilExtension (WixQuietExec) to run commands quietly with logging.
    - Uses [INSTALL_ROOT] as the install directory property used by CPack WiX.
  -->

  <Fragment>
    <!-- Pull this fragment into the CPack-generated MSI -->
    <FeatureRef Id="ProductFeature"/>
    
    <!-- Keep Restart Manager enabled (default) to stop services in basic/silent UI -->
    
    <!-- Embedded VBScript to prompt the user on uninstall -->
    <Binary Id="AskRmGamepadVbs" SourceFile="$(sys.SOURCEFILEDIR)ask_remove_gamepad.vbs"/>
    <Binary Id="AskDelInstDirVbs" SourceFile="$(sys.SOURCEFILEDIR)ask_delete_install_dir.vbs"/>
    <!-- VBScript to show a final repair-complete notification (full UI only) -->
    <Binary Id="RepairCompleteVbs" SourceFile="$(sys.SOURCEFILEDIR)repair_complete.vbs"/>

  </Fragment>

  <!-- Define a stable tools directory under INSTALL_ROOT for WiX-authored payloads -->
  <Fragment>
    <DirectoryRef Id="INSTALL_ROOT">
      <Directory Id="DIR_Tools" Name="tools"/>
    </DirectoryRef>
  </Fragment>

  <!-- Control legacy service names separate from primary service component -->
  <Fragment>
    <DirectoryRef Id="INSTALL_ROOT">
      <Component Id="CtlStopApolloLegacy" Guid="{640D87CF-69A4-4F54-AE29-941F78D020B2}" KeyPath="yes">
        <CreateFolder/>
        <ServiceControl Id="SC_StopLegacyApollo" Name="sunshinesvc" Stop="both" Remove="uninstall" Wait="yes" />
      </Component>
    </DirectoryRef>
  </Fragment>

  <!-- Author the Apollo service installation under INSTALL_ROOT\\tools -->
  <Fragment>
    <DirectoryRef Id="DIR_Tools">
      <Component Id="ApolloSvc" Guid="{CBA8A3D9-5A2A-4F76-9923-5B23D1EDFBB6}">
        <File Id="ApolloSvcExe" Source="!(bindpath.PayloadRoot)tools\\sunshinesvc.exe" KeyPath="yes" />
        <ServiceInstall
            Id="ApolloServiceInstall"
            Name="ApolloService"
            DisplayName="Apollo Service"
            Type="ownProcess"
            Start="auto"
            ErrorControl="normal"
            Arguments="--service" />
        <ServiceControl Id="StartApolloService"
            Name="ApolloService"
            Start="install"
            Stop="both"
            Remove="uninstall"
            Wait="yes" />
      </Component>
    </DirectoryRef>
  </Fragment>

  <Fragment>
    <CustomAction Id="ResetAcls" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="check" Impersonate="no" />
    <CustomAction Id="MigrateConfig" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="check" Impersonate="no" />
    <CustomAction Id="InstallGamepad" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="check" Impersonate="no" />
    <CustomAction Id="UpdatePathAdd" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="check" Impersonate="no" />
    <CustomAction Id="AddFirewallRule" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />

    <!-- Prune stale web assets directory prior to installing new files (avoids stale hashed JS/CSS) -->
    <CustomAction Id="PruneWebDir" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />

    <!-- Uninstall-time actions (deferred, elevated) -->
    <CustomAction Id="RestoreNvPrefsUndo" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="check" Impersonate="no" />
    <!-- Quiet stop for repair/basic UI: proactively stop service when UI is too low for prompts -->
    <CustomAction Id="StopSvcQuiet" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <!-- Quiet start after repair for non-full UI; run at commit to avoid FilesInUse/reboot prompts -->
    <CustomAction Id="StartSvcQuiet" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="commit" Return="ignore" Impersonate="no" />
    <!-- Quiet process kill and service removal for manual uninstalls -->
    <CustomAction Id="KillProcsQuiet" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <CustomAction Id="RemoveServiceQuiet" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <CustomAction Id="UpdatePathRemove" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <CustomAction Id="RemoveFirewallRule" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <CustomAction Id="UninstallGamepad" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="check" Impersonate="no" />
    <CustomAction Id="DeleteInstallDir" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
    <!-- Remove everything but config on manual uninstalls when user chooses to keep data -->
    <CustomAction Id="PruneButConfig" BinaryKey="WixCA" DllEntry="WixQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />

    <!-- Immediate property setters to pass commands to deferred QuietExec actions -->
    <CustomAction Id="SetResetAcls"
                 Property="ResetAcls"
                 Value="&quot;[SystemFolder]icacls.exe&quot; &quot;[INSTALL_ROOT].&quot; /reset"/>

    <CustomAction Id="SetMigrateConfig"
                 Property="MigrateConfig"
                 Value="&quot;[SystemFolder]cmd.exe&quot; /C &quot;&quot;[INSTALL_ROOT]scripts\migrate-config.bat&quot;&quot;"/>


    <CustomAction Id="SetInstallGamepad"
                 Property="InstallGamepad"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -ExecutionPolicy Bypass -File &quot;[INSTALL_ROOT]scripts\install-gamepad.ps1&quot;"/>

    <CustomAction Id="SetUpdatePathAdd"
                 Property="UpdatePathAdd"
                 Value="&quot;[SystemFolder]cmd.exe&quot; /C &quot;&quot;[INSTALL_ROOT]scripts\update-path.bat&quot; add&quot;"/>

    <CustomAction Id="SetAddFirewallRule"
                 Property="AddFirewallRule"
                 Value="&quot;[SystemFolder]cmd.exe&quot; /C &quot;&quot;[INSTALL_ROOT]scripts\add-firewall-rule.bat&quot;&quot;"/>

    <!-- Immediate setter for pruning installed web assets directory before file copy -->
    <CustomAction Id="SetPruneWebDir"
                 Property="PruneWebDir"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -ExecutionPolicy Bypass -Command &quot;$p='[INSTALL_ROOT]assets\web'; if (Test-Path -LiteralPath $p) { Remove-Item -LiteralPath $p -Recurse -Force -ErrorAction SilentlyContinue }&quot;"/>


    <!-- Guard NV prefs restore on uninstall: only run if sunshine.exe still exists -->
    <CustomAction Id="SetRestoreNvPrefsUndo"
                 Property="RestoreNvPrefsUndo"
                 Value="&quot;[SystemFolder]cmd.exe&quot; /C if exist &quot;[INSTALL_ROOT]sunshine.exe&quot; ( &quot;[INSTALL_ROOT]sunshine.exe&quot; --restore-nvprefs-undo ) else ( exit /b 0 )"/>


    <CustomAction Id="AskRemoveGamepad" BinaryKey="AskRmGamepadVbs" VBScriptCall="AskRemoveGamepad" Execute="immediate" Return="check" />
    <CustomAction Id="SetUninstallGamepad"
                 Property="UninstallGamepad"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -ExecutionPolicy Bypass -File &quot;[INSTALL_ROOT]scripts\uninstall-gamepad.ps1&quot;"/>

    <CustomAction Id="AskDeleteInstallDir" BinaryKey="AskDelInstDirVbs" VBScriptCall="AskDeleteInstallDir" Execute="immediate" Return="check" />
    <CustomAction Id="SetDeleteInstallDir"
                 Property="DeleteInstallDir"
                 Value="&quot;[SystemFolder]cmd.exe&quot; /C rmdir /S /Q &quot;[INSTALL_ROOT].&quot;"/>
    <!-- Immediate setter for quiet stop service -->
    <CustomAction Id="SetStopSvcQuiet"
                 Property="StopSvcQuiet"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -ExecutionPolicy Bypass -NoProfile -Command &quot;&amp; { $names=@('ApolloService','SunshineService','sunshinesvc'); foreach($n in $names){ $svc=Get-Service -Name $n -ErrorAction SilentlyContinue; if($svc){ if($svc.Status -ne 'Stopped'){ Stop-Service -Name $n -Force -ErrorAction SilentlyContinue; $svc.WaitForStatus('Stopped','00:00:30') } } } }&quot;"/>
    <!-- Immediate setter to prune everything except the config directory -->
    <CustomAction Id="SetPruneButConfig"
                 Property="PruneButConfig"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -ExecutionPolicy Bypass -Command &quot;$r='[INSTALL_ROOT]'; Get-ChildItem -LiteralPath $r -Force | Where-Object Name -ne 'config' | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue&quot;"/>

    <!-- Immediate setter for quiet start service -->
    <CustomAction Id="SetStartSvcQuiet"
                 Property="StartSvcQuiet"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -ExecutionPolicy Bypass -NoProfile -Command &quot;&amp; { $svc = Get-Service -Name 'ApolloService' -ErrorAction SilentlyContinue; if(-not $svc){ $svc = Get-Service -Name 'SunshineService' -ErrorAction SilentlyContinue } if($svc -and $svc.Status -ne 'Running'){ Start-Service -Name $svc.Name -ErrorAction SilentlyContinue; $svc.WaitForStatus('Running','00:00:20') } }&quot;"/>
    <!-- Immediate setters for quiet process kill and service removal on manual uninstall -->
    <CustomAction Id="SetKillProcsQuiet"
                 Property="KillProcsQuiet"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -ExecutionPolicy Bypass -Command &quot;$n='sunshine','sunshinesvc','sunshine_wgc_capture','playnite_launcher','apollo','apollosvc'; foreach($p in $n){ Get-Process -Name $p -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue }&quot;"/>

    <CustomAction Id="SetUpdatePathRemove"
                 Property="UpdatePathRemove"
                 Value="&quot;[SystemFolder]cmd.exe&quot; /C &quot;&quot;[INSTALL_ROOT]scripts\update-path.bat&quot; remove&quot;"/>

    <CustomAction Id="SetRemoveFirewallRule"
                 Property="RemoveFirewallRule"
                 Value="&quot;[SystemFolder]cmd.exe&quot; /C &quot;&quot;[INSTALL_ROOT]scripts\delete-firewall-rule.bat&quot;&quot;"/>

    <CustomAction Id="SetRemoveServiceQuiet"
                 Property="RemoveServiceQuiet"
                 Value="&quot;[SystemFolder]WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -ExecutionPolicy Bypass -Command &quot;&amp; { sc.exe delete 'ApolloService' | Out-Null; sc.exe delete 'SunshineService' | Out-Null; sc.exe delete 'sunshinesvc' | Out-Null }&quot;"/>

    <!-- UI-only prompt at end of a successful Repair to inform no reboot is required -->
    <CustomAction Id="RepairCompletePrompt" BinaryKey="RepairCompleteVbs" VBScriptCall="ShowRepairComplete" Execute="immediate" Return="ignore" />

  </Fragment>

  <!-- PATH and firewall management handled via scripted custom actions -->
</Wix>
